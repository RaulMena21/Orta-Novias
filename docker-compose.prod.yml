version: '3.9'

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - ortanovias_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis para cache y Celery
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - ortanovias_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Aplicación Django Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_HOST=db
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ortanovias_network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    command: celery
    volumes:
      - logs_volume:/app/logs
    environment:
      - POSTGRES_HOST=db
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - backend
    networks:
      - ortanovias_network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Celery Beat (Programador de tareas)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    command: celery-beat
    volumes:
      - logs_volume:/app/logs
    environment:
      - POSTGRES_HOST=db
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - backend
    networks:
      - ortanovias_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Flower (Monitor de Celery)
  flower:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    command: flower
    ports:
      - "5555:5555"
    environment:
      - POSTGRES_HOST=db
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      - redis
      - celery_worker
    networks:
      - ortanovias_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx (Reverse Proxy y Static Files)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/static
      - media_volume:/media
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - ortanovias_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend React (Build para producción)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    volumes:
      - frontend_build:/app/dist
    networks:
      - ortanovias_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local
  frontend_build:
    driver: local

networks:
  ortanovias_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
